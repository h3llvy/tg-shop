import { HandlerBot } from '../../../../../types/bot'
import { BOT_ASSETS } from '../../../../core/config/assets'
import { giftService } from '../../../services/giftService'
import type { IGift } from '../../../types/gift'
import { LoggerService } from '../../../../core/services/loggerService'
import { InlineQueryResultArticle, ParseMode } from 'grammy/types'

export const setupInlineGiftHandlers = (bot: HandlerBot): void => {
  const logger = new LoggerService()

  bot.on('inline_query', async (ctx) => {
    try {
      const query = ctx.inlineQuery.query
      logger.logInfo('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å:', { query })

      let gifts: IGift[] = []
      if (query.startsWith('gift_')) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–¥–∞—Ä–∫–∞
        const giftId = query.replace('gift_', '')
        const gift = await giftService.getGiftByIdAsync(giftId)
        gifts = gift ? [gift] : []
      } else {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
        gifts = await giftService.getAllAsync()
      }

      logger.logInfo('–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è inline —Ä–µ–∂–∏–º–∞:', { 
        count: gifts.length,
        query 
      })

      const results: InlineQueryResultArticle[] = gifts.map((gift: IGift) => ({
        type: 'article',
        id: String(gift._id),
        title: gift.name,
        description: `Send ${gift.name} (${gift.prices.USDT} USDT)`,
        thumbnail_url: gift.image || BOT_ASSETS.AVATAR_URL,
        thumbnail_width: 100,
        thumbnail_height: 100,
        input_message_content: {
          message_text: `üéÅ I have a gift for you!\n\n${gift.name}\n\nTap the button below to receive it.`,
          parse_mode: 'HTML' as ParseMode
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üéÅ Receive Gift',
              callback_data: `receive_gift:${gift._id}`
            }
          ]]
        }
      }))

      await ctx.answerInlineQuery(results, {
        cache_time: 1, // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1 —Å–µ–∫—É–Ω–¥—É
        is_personal: true // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      })
    } catch (error) {
      logger.logError('Error in inline query handler:', error)
      await ctx.answerInlineQuery([])
    }
  })
}
