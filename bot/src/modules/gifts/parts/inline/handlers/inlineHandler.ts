import { HandlerBot } from '../../../../../types/bot'
import { LoggerService } from '../../../../core/services/loggerService'
import type { InlineQueryResultArticle } from 'grammy/types'
import axios from 'axios'

// –ò—Å–ø–æ–ª—å–∑—É–µ–º SERVER_URL –∏–∑ env
const API_URL = process.env.SERVER_URL || 'https://local-tuna-server.ru.tuna.am'
const DEFAULT_THUMBNAIL = `${API_URL}/static/avatar.png`

export const setupInlineGiftHandlers = (bot: HandlerBot): void => {
  const logger = new LoggerService()

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
  bot.on('inline_query', async (ctx) => {
    try {
      const giftId = ctx.inlineQuery.query.trim()
      
      if (!giftId || !giftId.match(/^[0-9a-fA-F]{24}$/)) {
        await ctx.answerInlineQuery([])
        return
      }

      logger.logInfo('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å:', {
        giftId,
        apiUrl: API_URL
      })

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
      const response = await axios.get(`${API_URL}/api/gifts/inline/${giftId}`)
      const gift = response.data

      if (!gift) {
        logger.logWarning('Gift not found for inline query:', { giftId })
        await ctx.answerInlineQuery([])
        return
      }

      const results: InlineQueryResultArticle[] = [{
        type: 'article',
        id: giftId,
        title: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: ${gift.name}`,
        description: '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫',
        thumbnail_url: gift.image || DEFAULT_THUMBNAIL,
        reply_markup: {
          inline_keyboard: [[
            { text: 'Receive Gift', callback_data: `receive_gift:${giftId}` }
          ]]
        },
        input_message_content: {
          message_text: `üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ–±—è!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å: ${gift.name}`
        }
      }]

      await ctx.answerInlineQuery(results, { 
        cache_time: 300,
        is_personal: true
      })
    } catch (error) {
      logger.logError('Error in inline query handler:', error)
      // –û—Ç–≤–µ—á–∞–µ–º –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      await ctx.answerInlineQuery([])
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Receive Gift
  bot.callbackQuery(/^receive_gift:(.+)$/, async (ctx) => {
    try {
      const giftId = ctx.match[1]
      const userId = ctx.from.id
      
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
      await axios.post(`${API_URL}/api/gifts/${giftId}/receive`, {
        userId
      })

      await ctx.answerCallbackQuery({
        text: '–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! üéâ',
        show_alert: true
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
      await ctx.editMessageText(
        `üéÅ –ü–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.first_name}!`,
        {
          reply_markup: { inline_keyboard: [] }
        }
      )
    } catch (error) {
      logger.logError('Error receiving gift:', error)
      await ctx.answerCallbackQuery({
        text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞',
        show_alert: true
      })
    }
  })
}