import type { HandlerBot } from '../../../types/bot'
import type { Context } from 'grammy'
import { GiftService } from '../services/giftService'
import { NotificationService } from '../../notifications/services/notificationService'
import { LoggerService } from '../../core/services/loggerService'
import { UserService } from '../../users/services/userService'

export function setupGiftHandlers(bot: HandlerBot): void {
  const giftService = new GiftService()
  const notificationService = new NotificationService()
  const logger = new LoggerService()
  const userService = new UserService()

  bot.command('sendgift', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id
      if (!userId) {
        await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤')
        return
      }

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ üéÅ')
    } catch (error) {
      logger.logError(error as Error, 'giftHandlers.sendgift')
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞')
    }
  })

  bot.on('callback_query:data', async (ctx) => {
    try {
      const data = ctx.callbackQuery.data
      if (!data.startsWith('gift:')) return

      const [action, giftId] = data.split(':')
      const userId = ctx.from.id

      if (action === 'send') {
        const targetUserId = ctx.callbackQuery.message?.reply_to_message?.from?.id
        if (!targetUserId) {
          await ctx.answerCallbackQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
          return
        }

        await giftService.sendGiftAsync(
          giftId,
          userId.toString(),
          targetUserId.toString()
        )

        await userService.incrementGiftsSentAsync(userId)
        await userService.incrementGiftsReceivedAsync(targetUserId)

        await notificationService.notifyGiftSentAsync(userId, ctx.from.first_name)
        await ctx.answerCallbackQuery('–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      }
    } catch (error) {
      logger.logError(error as Error, 'giftHandlers.callback')
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è')
    }
    
  })
}
