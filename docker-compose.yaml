version: '3.8'

x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    logging:
      driver: "none"
    command: ["mongod", "--quiet", "--logpath", "/dev/null"]
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    <<: *default-logging
    networks:
      - app-network

  server:
    build: 
      context: ./server
      target: production
    ports:
      - "${PORT}:4000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - HOST=${HOST}
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - BOT_TOKEN=${BOT_TOKEN}
      - CRYPTO_PAY_API_TOKEN=${CRYPTO_PAY_API_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - PUBLIC_URL=${PUBLIC_URL}
      - WEBHOOK_DOMAIN=${WEBHOOK_DOMAIN}
      - WEBHOOK_PATH=${WEBHOOK_PATH}
      - SUPPORT_CHAT_ID=${SUPPORT_CHAT_ID}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MONGODB_LOG_LEVEL=${MONGODB_LOG_LEVEL}
      - MONGOOSE_DEBUG=${MONGOOSE_DEBUG}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    <<: *default-logging
    networks:
      - app-network
    restart: unless-stopped

  client:
  build:
    context: ./client
    target: production
  ports:
    - "${VITE_PORT:-3000}:3000"
  environment:
    - VITE_API_URL=${VITE_API_URL}
    - VITE_PUBLIC_URL=${VITE_PUBLIC_URL}
    - VITE_TELEGRAM_BOT_USERNAME=${VITE_TELEGRAM_BOT_USERNAME}
    - VITE_CRYPTO_PAY_API_URL=${VITE_CRYPTO_PAY_API_URL}
  networks:
    - app-network
  healthcheck:
    test: ["CMD", "wget", "--spider", "http://localhost:3000"]
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 30s

  bot:
    build:
      context: ./bot
      target: production
    environment:
      - NODE_ENV=${NODE_ENV}
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - SERVER_URL=${SERVER_URL}
      - SUPPORT_CHAT_ID=${SUPPORT_CHAT_ID}
      - BOT_ASSETS_URL=${BOT_ASSETS_URL}
      - BOT_AVATAR_PATH=${BOT_AVATAR_PATH}
      - BOT_START_IMAGE_PATH=${BOT_START_IMAGE_PATH}
    depends_on:
      - server
    <<: *default-logging
    networks:
      - app-network
    restart: unless-stopped

  tuna-client:
    image: yuccastream/tuna:latest
    command: http client:3000 --subdomain=local-tuna-client --inspect=false
    restart: always
    depends_on:
      client:
        condition: service_healthy
    environment:
      - TUNA_TOKEN=${TUNA_TOKEN}
    networks:
      - app-network

  tuna-server:
    image: yuccastream/tuna:latest
    command: http server:4000 --subdomain=local-tuna-server --inspect=false
    restart: always
    depends_on:
      - server
    environment:
      - TUNA_TOKEN=${TUNA_TOKEN}
    <<: *default-logging
    networks:
      - app-network

  seed:
    build: 
      context: ./server
      target: production
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - BOT_TOKEN=${BOT_TOKEN}
      - CRYPTO_PAY_API_TOKEN=${CRYPTO_PAY_API_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - WEBAPP_URL=${WEBAPP_URL}
      - PUBLIC_URL=${PUBLIC_URL}
      - WEBHOOK_DOMAIN=${WEBHOOK_DOMAIN}
      - WEBHOOK_PATH=${WEBHOOK_PATH}
      - SUPPORT_CHAT_ID=${SUPPORT_CHAT_ID}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MONGODB_LOG_LEVEL=${MONGODB_LOG_LEVEL}
      - MONGOOSE_DEBUG=${MONGOOSE_DEBUG}
    command: >
      sh -c "
        echo 'Ожидаем запуск MongoDB...' &&
        sleep 10 &&
        echo 'Заполняем базу данных...' &&
        npm run seed:all &&
        echo 'База данных заполнена' &&
        exit 0"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
