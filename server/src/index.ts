import './config/moduleAlias'
import 'dotenv/config'
import { createServer } from 'http'
import { app } from './app'
import { DatabaseService } from './modules/database/services/databaseService'
import { WebSocketService } from './modules/websocket/services/websocketService'
import { LoggerService } from './modules/core/services/loggerService'
import fs from 'fs'
import path from 'path'

const PORT = Number(process.env.PORT) || 4000
const HOST = process.env.HOST || '0.0.0.0'
const logger = new LoggerService()

function validateEnvVariables() {
  const requiredVars = [
    'NODE_ENV',
    'PORT',
    'HOST',
    'BOT_TOKEN',
    'CRYPTO_PAY_API_TOKEN',
    'JWT_SECRET',
    'MONGODB_URI',
    'REDIS_HOST',
    'REDIS_PORT',
    'REDIS_PASSWORD'
  ]

  const missingVars = requiredVars.filter(varName => !process.env[varName])
  
  if (missingVars.length > 0) {
    console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars)
    process.exit(1)
  }

  console.log('–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
  requiredVars.forEach(varName => {
    console.log(`${varName}: ${process.env[varName]}`)
  })
}

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
validateEnvVariables()

// –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
async function startServerAsync() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    const staticPath = path.join(__dirname, '../static')
    const avatarPath = path.join(staticPath, 'avatar.png')

    if (!fs.existsSync(staticPath)) {
      fs.mkdirSync(staticPath, { recursive: true })
      logger.logInfo('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static')
    }

    if (!fs.existsSync(avatarPath)) {
      logger.logError('–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', { path: avatarPath })
      process.exit(1)
    }

    logger.logInfo('–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', { 
      staticPath,
      files: fs.readdirSync(staticPath)
    })

    await DatabaseService.getInstance().connectAsync()

    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    const httpServer = createServer(app)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
    const wsService = WebSocketService.getInstance()
    wsService.initialize(httpServer)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º httpServer.listen –≤–º–µ—Å—Ç–æ app.listen
    httpServer.listen(PORT, HOST, () => {
      logger.logInfo(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`)
      logger.logInfo(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://${HOST}:${PORT}/ws`)
    })
  } catch (error) {
    logger.logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
    process.exit(1)
  }
}

startServerAsync()